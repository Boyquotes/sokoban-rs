use bevy::prelude::*;
use leafwing_input_manager::{prelude::*, user_input::InputKind};
use serde::{Deserialize, Serialize};

#[derive(
    Actionlike, Component, Reflect, Clone, Copy, Hash, PartialEq, Eq, Serialize, Deserialize,
)]
pub enum Action {
    MoveUp,
    MoveDown,
    MoveLeft,
    MoveRight,

    Undo,
    Redo,

    ResetLevel,
    NextLevel,
    PreviousLevel,
    NextUnsolvedLevel,
    PreviousUnsolvedLevel,

    ZoomOut,
    ZoomIn,

    ToggleInstantMove,
    ToggleAutomaticSolution,
    ToggleFullscreen,

    ImportLevelsFromClipboard,
    ExportLevelToClipboard,
}

pub fn default_input_action_map() -> InputMap<Action> {
    InputMap::new([
        // Mouse
        (
            UserInput::Single(InputKind::Mouse(MouseButton::Other(1))),
            Action::Undo,
        ),
        (
            UserInput::Single(InputKind::Mouse(MouseButton::Other(2))),
            Action::Redo,
        ),
        (
            UserInput::Single(InputKind::MouseWheel(MouseWheelDirection::Down)),
            Action::ZoomOut,
        ),
        (
            UserInput::Single(InputKind::MouseWheel(MouseWheelDirection::Up)),
            Action::ZoomIn,
        ),
        // Keyboard
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::W)),
            Action::MoveUp,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::S)),
            Action::MoveDown,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::A)),
            Action::MoveLeft,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::D)),
            Action::MoveRight,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::Up)),
            Action::MoveUp,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::Down)),
            Action::MoveDown,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::Left)),
            Action::MoveLeft,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::Right)),
            Action::MoveRight,
        ),
        (
            UserInput::Chord(vec![
                InputKind::Keyboard(KeyCode::ControlLeft),
                InputKind::Keyboard(KeyCode::Z),
            ]),
            Action::Undo,
        ),
        (
            UserInput::Chord(vec![
                InputKind::Keyboard(KeyCode::ControlLeft),
                InputKind::Keyboard(KeyCode::ShiftLeft),
                InputKind::Keyboard(KeyCode::Z),
            ]),
            Action::Redo,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::Escape)),
            Action::ResetLevel,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::BracketRight)),
            Action::NextLevel,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::BracketLeft)),
            Action::PreviousLevel,
        ),
        (
            UserInput::Chord(vec![
                InputKind::Keyboard(KeyCode::ControlLeft),
                InputKind::Keyboard(KeyCode::BracketRight),
            ]),
            Action::NextUnsolvedLevel,
        ),
        (
            UserInput::Chord(vec![
                InputKind::Keyboard(KeyCode::ControlLeft),
                InputKind::Keyboard(KeyCode::BracketLeft),
            ]),
            Action::PreviousUnsolvedLevel,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::Minus)),
            Action::ZoomOut,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::Equals)),
            Action::ZoomIn,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::I)),
            Action::ToggleInstantMove,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::P)),
            Action::ToggleAutomaticSolution,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::F11)),
            Action::ToggleFullscreen,
        ),
        (
            UserInput::Chord(vec![
                InputKind::Keyboard(KeyCode::ControlLeft),
                InputKind::Keyboard(KeyCode::V),
            ]),
            Action::ImportLevelsFromClipboard,
        ),
        (
            UserInput::Chord(vec![
                InputKind::Keyboard(KeyCode::ControlLeft),
                InputKind::Keyboard(KeyCode::ShiftLeft),
                InputKind::Keyboard(KeyCode::C),
            ]),
            Action::ExportLevelToClipboard,
        ),
        // Keyboard (Vim)
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::K)),
            Action::MoveUp,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::J)),
            Action::MoveDown,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::H)),
            Action::MoveLeft,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::L)),
            Action::MoveRight,
        ),
        (
            UserInput::Single(InputKind::Keyboard(KeyCode::U)),
            Action::Undo,
        ),
        (
            UserInput::Chord(vec![
                InputKind::Keyboard(KeyCode::ControlLeft),
                InputKind::Keyboard(KeyCode::R),
            ]),
            Action::Redo,
        ),
        // Gamepad
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::DPadUp)),
            Action::MoveUp,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::DPadDown)),
            Action::MoveDown,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::DPadLeft)),
            Action::MoveLeft,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::DPadRight)),
            Action::MoveRight,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::East)),
            Action::Undo,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::South)),
            Action::Redo,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::RightTrigger)),
            Action::NextLevel,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::LeftTrigger)),
            Action::PreviousLevel,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::LeftTrigger2)),
            Action::ZoomOut,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::RightTrigger2)),
            Action::ZoomIn,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::West)),
            Action::ToggleInstantMove,
        ),
        (
            UserInput::Single(InputKind::GamepadButton(GamepadButtonType::North)),
            Action::ToggleAutomaticSolution,
        ),
    ])
}
